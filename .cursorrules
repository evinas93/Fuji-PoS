{
  "allow": [
    "*.env",
    ".env.local",
    ".env.development",
    ".env.production",
    ".env.test"
  ],
  "project_context": {
    "name": "Fuji Restaurant Point of Sale (POS) System",
    "version": "1.2",
    "timeline": "20 weeks (September 2025 - February 2026)",
    "type": "Complete digital transformation from paper-based to modern POS system",
    "current_status": "Core Systems Complete - Ready for Advanced Features",
    "last_updated": "January 23, 2025",
    "technology_stack": {
      "frontend": "React/Next.js (touch-optimized for tablets)",
      "backend": "Node.js with TypeScript and Express.js RESTful APIs",
      "database": "Supabase (PostgreSQL with built-in auth, real-time, and API)",
      "payment_processing": "Integration with credit card processors (Stripe/Square)",
      "deployment": "Vercel/Netlify for frontend, Supabase for backend/database",
      "hardware": "iPad/Android tablets, thermal printers, POS terminals"
    },
    "core_modules": [
      "✅ Digital menu management with real-time updates (COMPLETED)",
      "✅ Touch-optimized order processing (dine-in/take-out) (COMPLETED)",
      "⚠️ Automated payment processing and receipt generation (PARTIAL - receipt generation done, payment processing pending)",
      "✅ Role-based user authentication (6 roles: admin/manager/server/cashier/kitchen/viewer) (COMPLETED)",
      "⚠️ Real-time sales tracking and analytics dashboard (PARTIAL - basic tracking done, advanced analytics pending)",
      "✅ Kitchen display system integration (COMPLETED)",
      "⚠️ Comprehensive reporting and business insights (PARTIAL - basic reporting done, advanced analytics pending)"
    ],
    "database_schema": {
      "status": "✅ COMPLETED - 15+ tables implemented with sample data",
      "profiles": "id (uuid), username, role, first_name, last_name, status, created_at, updated_at",
      "menu_items": "id (uuid), category_id, name, description, base_price, price_variations (jsonb), modifiers (jsonb), availability, special_flags (jsonb), created_at, updated_at",
      "categories": "id (uuid), name, display_order, active, created_at, updated_at",
      "orders": "id (uuid), order_date, type (dine_in/take_out), table_number, server_id (uuid), status, subtotal, tax, gratuity, total, payment_method, created_at, updated_at",
      "order_items": "id (uuid), order_id (uuid), item_id (uuid), quantity, unit_price, modifiers (jsonb), special_instructions, created_at",
      "daily_sales": "date, togo_sales, dine_in_sales, tax_collected, gross_sale, gratuity_total, net_sale, credit_total, cash_deposited",
      "additional_tables": "restaurant_tables, payments, shifts, inventory_items, system_settings, audit_logs"
    },
    "api_endpoints": {
      "status": "✅ COMPLETED - All core endpoints implemented and tested",
      "auth": [
        "POST /api/auth/signup",
        "POST /api/auth/signin",
        "POST /api/auth/signout",
        "GET /api/auth/user",
        "PUT /api/profiles/:id"
      ],
      "menu": [
        "GET /api/menu/items",
        "POST /api/menu/items",
        "PUT /api/menu/items/:id",
        "DELETE /api/menu/items/:id",
        "GET /api/menu/categories",
        "PUT /api/menu/items/:id/availability"
      ],
      "orders": [
        "POST /api/orders",
        "PUT /api/orders/:id",
        "GET /api/orders/active",
        "GET /api/orders/:id",
        "POST /api/orders/:id/payment",
        "PUT /api/orders/:id/status",
        "POST /api/orders/:id/calculate",
        "GET /api/orders/:id/receipt"
      ],
      "analytics": [
        "GET /api/analytics/daily",
        "GET /api/analytics/trends",
        "GET /api/analytics/real-time",
        "GET /api/reports/sales/:date",
        "GET /api/reports/export"
      ],
      "kitchen": [
        "GET /api/orders/kitchen/queue",
        "PUT /api/orders/:id/status"
      ]
    },
    "business_requirements": {
      "operational_targets": {
        "order_processing_time": "<30 seconds (40% improvement)",
        "payment_processing": "<45 seconds completion time",
        "daily_reconciliation": "<5 minutes (from 30 minutes)",
        "system_uptime": ">99.9% during business hours",
        "order_accuracy": ">99% (reduce errors by 50%)"
      },
      "financial_targets": {
        "average_ticket_increase": "15% through intelligent upselling",
        "transaction_volume": "10% increase",
        "labor_cost_reduction": "10%",
        "roi_achievement": "Within 12 months",
        "credit_card_error_reduction": "95%"
      }
    },
    "menu_structure": {
      "beverages": "Red Wine (5), White Wine (4), Blush Wine (3), Plum Wine (2), Domestic Beer (5), Imported Beer (3), Sake (3), Soft Drinks (7)",
      "food": "Sushi Rolls (11), Tempura Appetizers (3), Lunch Specials (10+), Early Bird Specials (3), Dinner Entrées (25+), Side Orders (6), Children's Menu (3)"
    },
    "pricing_rules": {
      "price_variations": "Glass/Bottle for wines, Lunch/Dinner pricing",
      "modifiers": "Sauce options, cooking preferences, portion sizes",
      "automatic_charges": "Split plate charges, service charges",
      "tax_rate": "Configurable by jurisdiction",
      "gratuity": "20% automatic for parties of 2 or more",
      "service_charge": "3.5% for credit card payments"
    },
    "payment_processing": {
      "methods": [
        "Cash payments with change calculation",
        "Credit/debit card processing (PCI DSS compliant)",
        "Split payments between multiple methods",
        "Partial payment handling",
        "Refund processing with manager approval"
      ],
      "calculation_engine": {
        "subtotal": "Sum of (item_price × quantity) + modifiers",
        "tax": "Subtotal × tax_rate",
        "gratuity": "(Subtotal + Tax) × 0.20 (if party ≥ 2)",
        "service_charge": "Total × 0.035 (if credit card)",
        "final_total": "Subtotal + Tax + Gratuity + Service_Charge - Discounts"
      }
    },
    "ui_specifications": {
      "design_principles": {
        "touch_first": "44x44 pixel minimum touch targets",
        "visual_hierarchy": "Primary and secondary actions distinct",
        "responsive": "Works on tablets (primary) and desktop",
        "color_coding": "Consistent status indicators (pending/preparing/ready)",
        "progressive_disclosure": "Advanced features hidden until needed"
      }
    },
    "security_requirements": {
      "pci_compliance": "For payment processing (handled by Stripe)",
      "supabase_rls": "Database-level access control",
      "rbac": "Manager/Server/Cashier/Kitchen roles via Supabase Auth",
      "password_requirements": "Supabase Auth with customizable password policies",
      "session_management": "JWT tokens with configurable expiration",
      "audit_trail": "All transactions logged with Supabase built-in audit features",
      "data_encryption": "SSL/TLS for transmission, AES-256 encryption at rest (Supabase default)"
    },
    "testing_requirements": {
      "current_status": "✅ 64 unit tests passing, ⚠️ Integration testing in progress",
      "unit_tests": "✅ 64 tests passing with Jest and React Testing Library",
      "integration_tests": "⚠️ In progress - Complete order-to-payment workflows",
      "user_acceptance_tests": "❌ Pending - Real staff testing scenarios",
      "performance_tests": "❌ Pending - 50 concurrent users, <2 second response times",
      "security_tests": "❌ Pending - Penetration testing, vulnerability scans",
      "cross_browser_tests": "❌ Pending - Chrome, Safari, Edge compatibility"
    },
    "deployment_strategy": {
      "current_phase": "Phase 2 - Core development (Weeks 5-12)",
      "phases": [
        "✅ Phase 1 (Weeks 1-4): Supabase setup, TypeScript backend foundation, database schema (COMPLETED)",
        "⚠️ Phase 2 (Weeks 5-12): Core development (menu, orders, payments with Stripe) (IN PROGRESS)",
        "❌ Phase 3 (Weeks 13-16): Advanced features (analytics, real-time updates, reporting) (PENDING)",
        "❌ Phase 4 (Weeks 17-18): Testing and quality assurance (PENDING)",
        "❌ Phase 5 (Weeks 19-20): Production deployment (Vercel + Supabase Pro) (PENDING)",
        "❌ Phase 6 (Weeks 21-24): Post-launch support and optimization (PENDING)"
      ]
    },
    "typescript_types": {
      "MenuItemType": {
        "id": "string",
        "category_id": "string",
        "name": "string",
        "description": "string",
        "base_price": "number",
        "price_variations": "Record<string, number>",
        "modifiers": "ModifierType[]",
        "availability": "boolean",
        "special_flags": "string[]",
        "created_at": "string",
        "updated_at": "string"
      },
      "OrderType": {
        "id": "string",
        "order_date": "string",
        "type": "'dine_in' | 'take_out'",
        "table_number": "number?",
        "server_id": "string",
        "status": "'pending' | 'preparing' | 'ready' | 'completed' | 'cancelled'",
        "subtotal": "number",
        "tax": "number",
        "gratuity": "number",
        "total": "number",
        "payment_method": "'cash' | 'credit' | 'debit'?",
        "created_at": "string",
        "updated_at": "string"
      },
      "UserProfile": {
        "id": "string",
        "username": "string",
        "role": "'manager' | 'server' | 'cashier' | 'kitchen'",
        "first_name": "string",
        "last_name": "string",
        "status": "'active' | 'inactive'",
        "created_at": "string",
        "updated_at": "string"
      }
    },
    "development_guidelines": {
      "current_status": "✅ Comprehensive guidelines implemented and tested",
      "code_style": [
        "✅ Follow modern TypeScript best practices with strict type checking",
        "✅ Use consistent naming conventions (camelCase for variables, PascalCase for components/types)",
        "✅ Implement proper error handling with custom error types and user-friendly messages",
        "✅ Write comprehensive unit tests with Jest and React Testing Library (64 tests passing)",
        "⚠️ Document all API endpoints with OpenAPI/Swagger (in progress)",
        "✅ Follow security best practices (never log sensitive data, use RLS policies)",
        "✅ Use Supabase Row Level Security (RLS) policies for data access control"
      ],
      "integration_points": [
        "✅ Supabase Services: Database (15+ tables), Auth (6 roles), Real-time subscriptions, ⚠️ Storage (configured)",
        "⚠️ Payment Processors: Stripe API for credit card processing (configured, needs implementation)",
        "✅ Kitchen Display: Real-time order updates via Supabase subscriptions (COMPLETED)",
        "✅ Receipt Generation: Automated totals calculation and receipt generation (COMPLETED)",
        "❌ Thermal Printer Integration: ESC/POS protocol for receipt printing (PENDING)",
        "❌ Email/SMS: Supabase Edge Functions with Twilio/SendGrid (PENDING)",
        "❌ File Storage: Supabase Storage for menu images and receipts (PENDING)",
        "❌ Analytics: Custom TypeScript functions with Supabase database functions (PENDING)"
      ],
      "performance_considerations": [
        "Database: Supabase automatic indexing + custom indexes for complex queries",
        "Frontend: Next.js optimization with bundle splitting and lazy loading",
        "CDN: Supabase CDN for static assets and images",
        "Caching: Supabase built-in caching + Redis for session data",
        "Real-time: Supabase real-time subscriptions for order updates",
        "Mobile-first: Responsive design with touch-optimized components",
        "TypeScript: Compile-time optimizations and tree-shaking"
      ]
    },
    "success_criteria": {
      "current_status": "✅ 4/6 must-have features completed, ⚠️ 2/6 in progress",
      "must_have_features": [
        "✅ Digital menu management with real-time updates (COMPLETED)",
        "✅ Touch-optimized order processing (COMPLETED)",
        "⚠️ Automated payment processing and receipt generation (PARTIAL - receipt generation done, payment processing pending)",
        "✅ Role-based user authentication (COMPLETED - 6 roles implemented)",
        "⚠️ Basic sales reporting and analytics (PARTIAL - basic tracking done, advanced analytics pending)",
        "✅ Kitchen display system integration (COMPLETED)"
      ],
      "nice_to_have_features": [
        "Online ordering system integration",
        "Customer-facing mobile app",
        "Advanced inventory management",
        "Marketing automation",
        "Multi-location support",
        "AI-powered sales insights"
      ]
    },
    "environment_variables": {
      "required": [
        "NEXT_PUBLIC_SUPABASE_URL=your-project-url",
        "NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key",
        "SUPABASE_SERVICE_ROLE_KEY=your-service-role-key (server-side only)"
      ]
    },
    "current_working_features": {
      "authentication_system": "✅ Complete user management with 6 role types (admin, manager, server, cashier, kitchen, viewer)",
      "database_integration": "✅ Full Supabase integration with 15+ tables and sample data",
      "menu_management": "✅ Complete CRUD operations with categories, items, modifiers, and pricing",
      "order_processing": "✅ Full order lifecycle from creation to completion with real-time updates",
      "kitchen_display": "✅ Real-time order updates and status tracking",
      "receipt_generation": "✅ Automated totals calculation and receipt generation",
      "role_based_access": "✅ Comprehensive RBAC with permission guards and route protection",
      "session_management": "✅ Automatic session timeout and warning system",
      "error_handling": "✅ Comprehensive error boundaries and user-friendly error messages",
      "testing_framework": "✅ 64 unit tests passing with Jest and React Testing Library"
    },
    "next_priority_areas": {
      "payment_processing": "⚠️ Stripe integration implementation (configured, needs development)",
      "advanced_reporting": "❌ Analytics dashboard with historical data and trends",
      "inventory_management": "❌ Basic inventory tracking with stock levels and alerts",
      "customer_management": "❌ Customer profiles and loyalty program features",
      "mobile_optimization": "❌ PWA features and mobile-specific optimizations",
      "production_deployment": "❌ Production environment setup and monitoring"
    },
    "references": {
      "prd_document": "fuji-pos-prd.md",
      "claude_context": "CLAUDE.md",
      "project_checklist": "tasks.json",
      "test_results": "FINAL_TEST_REPORT.md",
      "application_testing": "APPLICATION_TESTING_GUIDE.md"
    }
  }
}
